// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import core "github.com/fibercrypto/fibercryptowallet/src/core"

import mock "github.com/stretchr/testify/mock"
import promise "github.com/chebyrash/promise"

// DeviceHelper is an autogenerated mock type for the DeviceHelper type
type DeviceHelper struct {
	mock.Mock
}

// DeviceMatch provides a mock function with given fields: wlt
func (_m *DeviceHelper) DeviceMatch(wlt core.Wallet) *promise.Promise {
	ret := _m.Called(wlt)

	var r0 *promise.Promise
	if rf, ok := ret.Get(0).(func(core.Wallet) *promise.Promise); ok {
		r0 = rf(wlt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.Promise)
		}
	}

	return r0
}

// FirstAddress provides a mock function with given fields: walletType
func (_m *DeviceHelper) FirstAddress(walletType string) *promise.Promise {
	ret := _m.Called(walletType)

	var r0 *promise.Promise
	if rf, ok := ret.Get(0).(func(string) *promise.Promise); ok {
		r0 = rf(walletType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.Promise)
		}
	}

	return r0
}

// IsBootloaderMode provides a mock function with given fields:
func (_m *DeviceHelper) IsBootloaderMode() *promise.Promise {
	ret := _m.Called()

	var r0 *promise.Promise
	if rf, ok := ret.Get(0).(func() *promise.Promise); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.Promise)
		}
	}

	return r0
}

// ShouldBeInitialized provides a mock function with given fields:
func (_m *DeviceHelper) ShouldBeInitialized() *promise.Promise {
	ret := _m.Called()

	var r0 *promise.Promise
	if rf, ok := ret.Get(0).(func() *promise.Promise); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.Promise)
		}
	}

	return r0
}

// ShouldBeSecured provides a mock function with given fields:
func (_m *DeviceHelper) ShouldBeSecured() *promise.Promise {
	ret := _m.Called()

	var r0 *promise.Promise
	if rf, ok := ret.Get(0).(func() *promise.Promise); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.Promise)
		}
	}

	return r0
}

// ShouldUploadFirmware provides a mock function with given fields:
func (_m *DeviceHelper) ShouldUploadFirmware() *promise.Promise {
	ret := _m.Called()

	var r0 *promise.Promise
	if rf, ok := ret.Get(0).(func() *promise.Promise); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.Promise)
		}
	}

	return r0
}
